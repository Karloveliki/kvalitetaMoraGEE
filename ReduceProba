// Define a region of interest
var roi = ee.Geometry.Point([16.289002780181892,43.3944748974847]);
roi= ee.Geometry.Polygon(
[[ 

  [16.246564530619207,43.47703654992279],
  [16.50062336850983,43.47703654992279],
  [16.50062336850983,43.56864765332039],
  [16.246564530619207,43.56864765332039],
  [16.246564530619207,43.47703654992279]
]]    
)
var dataset = ee.ImageCollection('COPERNICUS/S3/OLCI')
                  .filterBounds(roi)
                  .filterDate('2022-07-06', '2022-07-07');

var bandFactors=[
    0.0139465,
    0.0133873,
    0.0121481,
    0.0115198,
    0.0100953,
    0.0123538,
    0.00879161,
    0.00876539,
    0.0095103,
    0.00773378,
    0.00675523,
    0.0071996,
    0.00749684,
    0.0086512,
    0.00526779,
    0.00530267,
    0.00493004,
    0.00549962,
    0.00502847,
    0.00326378,
    0.00324118
]

//var bands = ...
var bands=[
    'Oa01_radiance',
    'Oa02_radiance',
    'Oa03_radiance',
    'Oa04_radiance',
    'Oa05_radiance',
    'Oa06_radiance',
    'Oa07_radiance',
    'Oa08_radiance',
    'Oa09_radiance',
    'Oa10_radiance',
    'Oa11_radiance',
    'Oa12_radiance',
    'Oa13_radiance',
    'Oa14_radiance',
    'Oa15_radiance',
    'Oa16_radiance',
    'Oa17_radiance',
    'Oa18_radiance',
    'Oa19_radiance',
    'Oa20_radiance',
    'Oa21_radiance'
]
// Select bands for visualization and apply band-specific scale factors.
var rgb = dataset.select(bands)
              //.median()
              .first()
              // Convert to radiance units.
              //.multiply(ee.Image(bandFactors));


var thresholds = ee.Image([0, 50, 88, 10000]); //Define the thresholds
var classified = rgb.gt(thresholds).reduce('sum').toInt(); //Create the classified Image

var statsClassified = classified.reduceRegion({
  // Use ee.Reducer.minMax() to get min and max for each band
  reducer: ee.Reducer.minMax(),
  // Specify the region geometry
  geometry: roi,
  // Optional: Set the scale (pixel resolution) for the analysis
  // scale: 30 // Example scale in meters
});

print("min i max za classified", statsClassified)


var fromList = [ 0, 1,2,3]
var toList = [-1, 11,22,33]

var b01Reduced = classified.remap({
  from: fromList,
  to: toList,
  defaultValue: 707,
})

var stats = b01Reduced.reduceRegion({
  // Use ee.Reducer.minMax() to get min and max for each band
  reducer: ee.Reducer.minMax(),
  // Specify the region geometry
  geometry: roi,
  // Optional: Set the scale (pixel resolution) for the analysis
  // scale: 30 // Example scale in meters
});

print("min i max za sve bandove, vidi B01 i B10", stats)

print("done")
/*
// Get the number of bands
var bandNames = reduced.bandNames();
print('Number of bands:', bandNames.length);
print('bands:', bandNames)
// Get image dimensions (assuming all bands have the same size)
var firstBand = reduced.select(bandNames.get(0));
var dimensions = firstBand.getInfo().bands[0];
print('Image dimensions:', dimensions);
*/