var library = require('users/perkovickarlo5/proba:Library').myModule;

// Use the imported module
//print(myModule.publicFunction());

function hasValidData(image) {
  // Check if the image has any unmasked pixels
  var maskSum = image.mask().reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: image.geometry(),
    scale: 30
  }).get('sum');
  return maskSum > 0;
}

// Function to add a property indicating if an image is non-empty
var addNonEmptyProperty = function(image) {
  var stats = image.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: image.geometry(),
    scale: 3000,
    maxPixels: 1e15
  });
  var isNonEmpty = ee.Number(stats.values().get(0)).gt(0);
  return image.set('isNonEmpty', isNonEmpty);
};


var roi= library.rois["ciovo"]["geometry"]
var dataset = ee.ImageCollection('COPERNICUS/S3/OLCI')
                  .filterBounds(roi)
                  //.filterDate('2022-07-06', '2022-07-7');
                  .filterDate('2017-02-04', '2017-02-28')
                 // .filterDate('2016-07-04', '2016-07-06')

print("broj slika je",dataset.size())

// Map over the collection to add the non-empty property
var collectionWithProperty = dataset.map(addNonEmptyProperty);
print("collectionWithProperty", collectionWithProperty)
// Filter the collection based on the non-empty property
var nonEmptyCollection = collectionWithProperty.filter(ee.Filter.eq('isNonEmpty', true));

print("ima ne praznigh:", nonEmptyCollection.size())

var prva = dataset.first()
print(prva)
// Convert ImageCollection to a List
var imageList = dataset.toList(dataset.size());
// Extract the first, second, and third images
var firstImage = ee.Image(imageList.get(0));
var secondImage = ee.Image(imageList.get(1));
var thirdImage = ee.Image(imageList.get(2));

print(1, firstImage)
print(2, secondImage)
print(3, thirdImage)


firstImage=secondImage
// Select the 'quality_flags' band.
var qualityFlags = firstImage.select('quality_flags');

// Create a mask to identify invalid pixels (bit 25 set).
var invalidPixelMask = qualityFlags.bitwiseAnd(1 << 25).neq(0);

var nativeScale = firstImage.projection().nominalScale();
// Count the number of invalid pixels.
var invalidPixelCount = invalidPixelMask.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: firstImage.geometry(), // Use the image's geometry
  scale: nativeScale, // Choose an appropriate scale based on your image resolution
  maxPixels: 1e13 // Increase if necessary for large images
});

var totalPixelCount = qualityFlags.reduceRegion({
  reducer: ee.Reducer.count(),  // Use count() instead of sum()
  geometry: firstImage.geometry(),
  scale: nativeScale, // Choose an appropriate scale
  maxPixels: 1e13
});

// Calculate the number of valid pixels.
//var validPixelCount = totalPixelCount.get('quality_flags')
//  .sub(invalidPixelCount.get('quality_flags'));

// Calculate the percentage of valid pixels.
//var percentageValid = validPixelCount.divide(totalPixelCount.get('quality_flags'))
//  .multiply(100)
//  .getInfo();

// Print the results.
print('Total Pixels:', totalPixelCount.get('quality_flags'));
// Print the result.
print('Number of Invalid Pixels:', invalidPixelCount.get('quality_flags'));
//print('Percentage of Valid Pixels:', percentageValid);


/*
var rgbImage = thirdImage
  .select('Oa02_radiance', 'Oa03_radiance', 'Oa04_radiance')
  
  
var visualizationParams = {
  bands: ['Oa02_radiance', 'Oa03_radiance', 'Oa04_radiance'],
  min: 0,
  max: 1000
};

Map.centerObject(thirdImage, 10); // Adjust zoom level and center as needed
Map.addLayer(rgbImage, visualizationParams, 'Sentinel-3 RGB');


function createBandNames(n) {
  if (n>9) {
print(1, firstImage)
    return 'Oa' + String(n) + "_radiance"
  }
    return 'Oa0' + String(n) + "_radiance"
}

function provjeraPraznaSlika(image){
   var bands = image.reduceRegion({
    // Use ee.Reducer.minMax() to get min and max for each band
    reducer: ee.Reducer.min(),
    // Specify the region geometry
    geometry: roi,
    // Optional: Set the scale (pixel resolution) for the analysis
    // scale: 30 // Example scale in meters
  });
  
  var count = image.reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: image.geometry(),
    scale: 30,
    maxPixels: 10e12
  });

  // Check if the count is zero
  print("count", count)
  if (count.getNumber('count') === 0) {
    print('Image has no valid pixels');
    return true
  }
  print("band 10 value:",bands.get("Oa10_radiance"));
  for(var i=1;i<22;i++){
    var bandValue= bands.get(createBandNames(i));
    print("band:", i, bandValue.idesh);
    if(bandValue) {}
    else {
      print("slika je prazna")
      return true
    }
  }
  print("slika nije prazna");
  return false;
}
  
print("Prazna li ne?", provjeraPraznaSlika(prva))
*/